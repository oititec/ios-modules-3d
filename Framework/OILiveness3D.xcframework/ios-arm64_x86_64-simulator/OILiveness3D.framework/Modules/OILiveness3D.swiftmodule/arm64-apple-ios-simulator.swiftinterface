// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name OILiveness3D
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import DeveloperToolsSupport
import Foundation
import OICommons
import OIComponents
@_exported import OILiveness3D
import OINetwork
import OISecurity
import Swift
import SwiftUI
import UIKit.UIButton
import UIKit.UIImage
import UIKit
import UIKit.UIView
import UIKit.UIViewController
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ImageAnimationAppearance {
  public init(image: UIKit.UIImage?, rotationInterval: Swift.Int32, checkmarkForegroundColor: UIKit.UIColor, checkmarkBackgroundColor: UIKit.UIColor)
}
public struct Liveness3DError {
  public let code: Swift.Int
  public let type: OILiveness3D.Liveness3DErrorCode
  public let message: Swift.String
}
public struct Liveness3DShadow {
  public init(color: UIKit.UIColor, opacity: Swift.Float, radius: Swift.Float, offset: CoreFoundation.CGSize, insets: UIKit.UIEdgeInsets)
}
public protocol Liveness3DCustomInstructionView : UIKit.UIView {
  var backButton: UIKit.UIButton! { get }
  var continueButton: UIKit.UIButton! { get }
  func changeLoadingVisibility(to visibility: OILiveness3D.Visibility)
}
public protocol CustomResultAnimationDelegate {
  func createActivityIndicatorView() -> UIKit.UIView?
  func createSuccessAnimationView() -> UIKit.UIView?
}
public enum ResultAnimationStyle {
  case blob(appearance: OILiveness3D.BlobAnimationAppearance)
  case spinner(appearance: OILiveness3D.SpinnerAnimationAppearance)
  case image(appearance: OILiveness3D.ImageAnimationAppearance)
  case custom(delegate: any OILiveness3D.CustomResultAnimationDelegate)
}
public typealias Environment = OICommons.Environment
public typealias Visibility = OIComponents.Visibility
public typealias Liveness3DSuccess = OINetwork.Liveness3DSuccess
public protocol CustomCameraPermissionView : OIComponents.CustomCameraPermissionView {
  override func showBottomSheet(visibility: OILiveness3D.Visibility)
}
public struct Liveness3DUser {
  public init(appKey: Swift.String, ticket: Swift.String? = nil, environment: OILiveness3D.Environment, defaultTheme: OILiveness3D.Liveness3DTheme? = nil, lowLightTheme: OILiveness3D.Liveness3DTheme? = nil, texts: [OILiveness3D.Liveness3DTextKey : Swift.String]? = nil)
}
public struct BlobAnimationAppearance {
  public init(blobColor: UIKit.UIColor, checkmarkForegroundColor: UIKit.UIColor, checkmarkBackgroundColor: UIKit.UIColor)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class HybridLiveness3DViewController : OILiveness3D.Liveness3DViewController {
  @_Concurrency.MainActor(unsafe) public init(liveness3DUser: OILiveness3D.Liveness3DUser, delegate: any OILiveness3D.Liveness3DDelegate, customAppearance: OIComponents.HybridViewAppearance?)
  @objc deinit
}
public protocol Liveness3DDelegate : AnyObject {
  func handleLiveness3DValidation(validateModel: OILiveness3D.Liveness3DSuccess)
  func handleLiveness3DError(error: OILiveness3D.Liveness3DError)
}
public enum Liveness3DErrorCode : Swift.Int, Swift.Error {
  case invalidAppKey
  case noCameraPermission
  case noInternetConnection
  case livenessNotCompleted
  case livenessNotInitialized
  case transactionNotCompleted
  case genericException
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Liveness3DViewController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) weak public var liveness3DDelegate: (any OILiveness3D.Liveness3DDelegate)?
  @_Concurrency.MainActor(unsafe) convenience public init(liveness3DUser: OILiveness3D.Liveness3DUser, delegate: any OILiveness3D.Liveness3DDelegate, customInstructionView: (any OILiveness3D.Liveness3DCustomInstructionView)? = nil, customPermissionView: (any OILiveness3D.CustomCameraPermissionView)? = nil)
  @objc deinit
}
extension OILiveness3D.Liveness3DViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension OILiveness3D.Liveness3DViewController : OIComponents.CheckCameraPermissionDelegate {
  @_Concurrency.MainActor(unsafe) public func checkCameraPermission(continueFrom cameraPermissionVC: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) public func checkCameraPermission(close cameraPermissionVC: UIKit.UIViewController)
}
extension OILiveness3D.Liveness3DViewController : OIComponents.CheckCameraPermissionTrackerDelegate {
  @_Concurrency.MainActor(unsafe) public func trackViewDidAppear()
  @_Concurrency.MainActor(unsafe) public func trackGoBackAction()
  @_Concurrency.MainActor(unsafe) public func trackCheckPermissionAction()
  @_Concurrency.MainActor(unsafe) public func trackGoToSettingsAction()
  @_Concurrency.MainActor(unsafe) public func trackCloseAction()
}
public struct Liveness3DTheme {
  public enum CancelButtonLocation : Swift.Int {
    case topLeft, topRight, disabled
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ThemeType : Swift.Int {
    case light, dark
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(_ theme: OILiveness3D.Liveness3DTheme.ThemeType)
  public var readyScreenCustomizationHeaderFont: UIKit.UIFont?
  public var readyScreenCustomizationHeaderTextColor: UIKit.UIColor
  public var readyScreenCustomizationSubtextFont: UIKit.UIFont?
  public var readyScreenCustomizationSubtextTextColor: UIKit.UIColor
  public var readyScreenCustomizationTextBackgroundColor: UIKit.UIColor?
  public var readyScreenCustomizationTextBackgroundCornerRadius: Swift.Int32
  public var resultScreenCustomizationMessageFont: UIKit.UIFont?
  public var resultScreenCustomizationTextColor: UIKit.UIColor
  public var resultScreenCustomizationShowUploadProgressBar: Swift.Bool
  public var resultScreenCustomizationUploadProgressFillColor: UIKit.UIColor
  public var resultScreenCustomizationUploadProgressTrackColor: UIKit.UIColor
  public var resultScreenCustomizationAnimationRelativeScale: Swift.Float
  public var resultScreenCustomizationAnimationStyle: OILiveness3D.ResultAnimationStyle
  public var retryScreenCustomizationHeaderFont: UIKit.UIFont?
  public var retryScreenCustomizationHeaderTextColor: UIKit.UIColor
  public var retryScreenCustomizationSubtextFont: UIKit.UIFont?
  public var retryScreenCustomizationSubtextTextColor: UIKit.UIColor
  public var retryScreenCustomizationImageBorderColor: UIKit.UIColor
  public var retryScreenCustomizationImageBorderWidth: Swift.Int32
  public var retryScreenCustomizationImageCornerRadius: Swift.Int32
  public var guidanceCustomizationHeaderFont: UIKit.UIFont?
  public var guidanceCustomizationSubtextFont: UIKit.UIFont?
  public var guidanceCustomizationButtonBackgroundNormalColor: UIKit.UIColor
  public var guidanceCustomizationButtonBackgroundHighlightColor: UIKit.UIColor
  public var guidanceCustomizationButtonBackgroundDisabledColor: UIKit.UIColor
  public var guidanceCustomizationButtonTextNormalColor: UIKit.UIColor
  public var guidanceCustomizationButtonTextHighlightColor: UIKit.UIColor
  public var guidanceCustomizationButtonTextDisabledColor: UIKit.UIColor
  public var guidanceCustomizationButtonFont: UIKit.UIFont?
  public var guidanceCustomizationButtonBorderColor: UIKit.UIColor
  public var guidanceCustomizationButtonBorderWidth: Swift.Int32
  public var guidanceCustomizationButtonCornerRadius: Swift.Int32
  public var frameCustomizationBorderWidth: Swift.Int32
  public var frameCustomizationBorderColor: UIKit.UIColor
  public var frameCustomizationBackgroundColor: UIKit.UIColor
  public var frameCustomizationCornerRadius: Swift.Int32
  public var frameCustomizationShadow: OILiveness3D.Liveness3DShadow?
  public var ovalCustomizationStrokeColor: UIKit.UIColor
  public var ovalCustomizationStrokeWidth: Swift.Int32
  public var ovalCustomizationProgressColor1: UIKit.UIColor
  public var ovalCustomizationProgressColor2: UIKit.UIColor
  public var ovalCustomizationProgressStrokeWidth: Swift.Int32
  public var ovalCustomizationProgressRadialOffset: Swift.Int32
  public var overlayCustomizationBackgroundColor: UIKit.UIColor
  public var overlayCustomizationBrandingImage: UIKit.UIImage?
  public var overlayCustomizationShowBrandingImage: Swift.Bool
  public var feedbackCustomizationCornerRadius: Swift.Int32
  public var feedbackCustomizationBackgroundColor: UIKit.UIColor
  public var feedbackCustomizationTextColor: UIKit.UIColor
  public var feedbackCustomizationTextFont: UIKit.UIFont?
  public var feedbackCustomizationShadow: OILiveness3D.Liveness3DShadow?
  public var cancelButtonCustomizationCustomImage: UIKit.UIImage?
  public var cancelButtonCustomizationLocation: OILiveness3D.Liveness3DTheme.CancelButtonLocation
}
public struct SpinnerAnimationAppearance {
  public init(spinnerColor: UIKit.UIColor, checkmarkForegroundColor: UIKit.UIColor, checkmarkBackgroundColor: UIKit.UIColor)
}
public enum Liveness3DTextKey {
  case readyHeader1
  case readyHeader2
  case readyMessage1
  case readyMessage2
  case readyButton
  case retryHeader
  case retrySubheader
  case retryYourPicture
  case retryIdealPicture
  case retryMessageSmile
  case retryMessageLightning
  case retryMessageContrast
  case retryButton
  case resultUploadMessage
  case resultSuccessMessage
  case feedbackCenterFace
  case feedbackFaceNotFound
  case feedbackFaceNotLookingStraightAhead
  case feedbackFaceNotUpright
  case feedbackHoldSteady
  case feedbackMovePhoneAway
  case feedbackMovePhoneCloser
  case feedbackMovePhoneToEyeLevel
  case feedbackUseEvenLighting
  case feedbackFrameYourFace
  case feedbackPositionFaceStraightInOval
  case feedbackHoldSteady1
  case feedbackHoldSteady2
  case feedbackHoldSteady3
  case feedbackRemoveDarkGlasses
  case feedbackNeutralExpression
  case feedbackConditionsTooBright
  case feedbackBrightenYourEnvironment
  public static func == (a: OILiveness3D.Liveness3DTextKey, b: OILiveness3D.Liveness3DTextKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OILiveness3D.Liveness3DErrorCode : Swift.Equatable {}
extension OILiveness3D.Liveness3DErrorCode : Swift.Hashable {}
extension OILiveness3D.Liveness3DErrorCode : Swift.RawRepresentable {}
extension OILiveness3D.Liveness3DTheme.CancelButtonLocation : Swift.Equatable {}
extension OILiveness3D.Liveness3DTheme.CancelButtonLocation : Swift.Hashable {}
extension OILiveness3D.Liveness3DTheme.CancelButtonLocation : Swift.RawRepresentable {}
extension OILiveness3D.Liveness3DTheme.ThemeType : Swift.Equatable {}
extension OILiveness3D.Liveness3DTheme.ThemeType : Swift.Hashable {}
extension OILiveness3D.Liveness3DTheme.ThemeType : Swift.RawRepresentable {}
extension OILiveness3D.Liveness3DTextKey : Swift.Equatable {}
extension OILiveness3D.Liveness3DTextKey : Swift.Hashable {}
