// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OIComponents
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreGraphics
import DeveloperToolsSupport
import Foundation
@_exported import OIComponents
import Swift
import SwiftUI
import UIKit.UIButton
import UIKit.UIColor
import UIKit.UIImage
import UIKit
import UIKit.UIView
import UIKit.UIViewController
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct LinkComponentModel {
  public init(text: Swift.String, icon: OIComponents.ComponentIcon, size: OIComponents.ComponentSize, normalStyle: OIComponents.LinkComponentStyles, highlightedStyle: OIComponents.LinkComponentStyles)
}
public struct SearchFieldComponentModel {
  public init(searchImage: UIKit.UIImage?, cancelImage: UIKit.UIImage?, hasButton: Swift.Bool, placeholder: Swift.String)
  public init(searchImage: UIKit.UIImage?, cancelImage: UIKit.UIImage?, hasButton: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SwitchComponent : UIKit.UIView {
  public typealias ValueChangedHandler = (_ value: Swift.Bool) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public var isDisabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isSelected: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setSelected(to value: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func addObserverToValueChanged(handler: @escaping OIComponents.SwitchComponent.ValueChangedHandler)
  @objc deinit
}
extension OIComponents.ConstraintBuilder {
  public func trailing(anchor uiViewAnchor: UIKit.NSLayoutXAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
  public func trailing(anchor uiViewAnchor: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
  public func trailing(anchor layoutGuide: UIKit.UILayoutGuide, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
}
public struct ButtonComponentModel {
  public init(title: Swift.String? = nil, titleFont: UIKit.UIFont? = nil, type: OIComponents.ButtonComponentType = .complex, size: OIComponents.ComponentSize, icon: OIComponents.ComponentIcon, loadingIcon: UIKit.UIImage? = nil, highlightedStyle: OIComponents.ButtonComponentStyles, normalStyle: OIComponents.ButtonComponentStyles, disabledStyle: OIComponents.ButtonComponentStyles)
}
public struct ButtonComponentAppearance {
  public let backgroundColor: UIKit.UIColor
  public let borderColor: UIKit.UIColor
  public let contentColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor, borderColor: UIKit.UIColor, contentColor: UIKit.UIColor)
}
public enum ButtonComponentType {
  case simple
  case complex
  public static func == (a: OIComponents.ButtonComponentType, b: OIComponents.ButtonComponentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class InstructionsView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let backSquareButton: OIComponents.SquareButtonComponent
  @_Concurrency.MainActor(unsafe) public init(model: OIComponents.InstructionsModel)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func setupExtraViews() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) open func setupConstraintsOfExtraViews()
  @objc deinit
}
extension OIComponents.DesignTokens {
  public struct Shadow {
    public static let level1: OIComponents.DesignTokens.Shadow
    public static let level2: OIComponents.DesignTokens.Shadow
    public static let level3: OIComponents.DesignTokens.Shadow
    public static let level4: OIComponents.DesignTokens.Shadow
  }
}
public struct InstructionsModel {
  public let mainImage: UIKit.UIImage?
  public let title: Swift.String
  public let caption: Swift.String
  public init(mainImage: UIKit.UIImage?, title: Swift.String, caption: Swift.String)
}
extension OIComponents.ViewBuilder {
  public struct View {
    public static func create(with frame: CoreFoundation.CGRect) -> OIComponents.ViewBuilder.View
    public static func create(with size: CoreFoundation.CGSize) -> OIComponents.ViewBuilder.View
    public static func create() -> OIComponents.ViewBuilder.View
    public func build() -> UIKit.UIView
    public func backgroundColor(_ color: UIKit.UIColor) -> OIComponents.ViewBuilder.View
    public func backgroundColor(_ color: UIKit.UIColor, opacity: CoreFoundation.CGFloat = 1.0) -> OIComponents.ViewBuilder.View
    public func borderColor(_ color: UIKit.UIColor) -> OIComponents.ViewBuilder.View
    public func borderWidth(_ width: CoreFoundation.CGFloat) -> OIComponents.ViewBuilder.View
    public func cornerRadius(_ radius: CoreFoundation.CGFloat) -> OIComponents.ViewBuilder.View
    @available(iOS 11.0, *)
    public func cornerRadius(_ radius: CoreFoundation.CGFloat, edges: QuartzCore.CACornerMask) -> OIComponents.ViewBuilder.View
    public func masksToBounds(_ value: Swift.Bool = true) -> OIComponents.ViewBuilder.View
    public func customContent(contentBuilder: @escaping (UIKit.UIView) -> Swift.Void) -> OIComponents.ViewBuilder.View
  }
}
public enum LoadingTypes {
  case activityIndicator
  case spinner
  public static func == (a: OIComponents.LoadingTypes, b: OIComponents.LoadingTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class OitiHeaderComponent : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var optionsAction: () -> Swift.Void
  @_Concurrency.MainActor(unsafe) final public let optionsButtonIdentifier: Swift.String
  @_Concurrency.MainActor(unsafe) public init(model: OIComponents.OitiHeaderComponentModel)
  @objc deinit
}
extension OIComponents.ConstraintBuilder {
  public func height(anchor uiViewAnchor: UIKit.NSLayoutDimension, multiplier: CoreFoundation.CGFloat = 1.0) -> OIComponents.ConstraintBuilder
  public func height(anchor uiViewAnchor: UIKit.UIView, multiplier: CoreFoundation.CGFloat = 1.0) -> OIComponents.ConstraintBuilder
  public func height(constant: CoreFoundation.CGFloat) -> OIComponents.ConstraintBuilder
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SearchFieldComponent : UIKit.UIView, UIKit.UITextFieldDelegate {
  public typealias SearchHandler = (_ component: OIComponents.SearchFieldComponent, _ searchText: Swift.String) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isFocused: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public init(model: OIComponents.SearchFieldComponentModel)
  @_Concurrency.MainActor(unsafe) public func onSearchSubmit(handler: @escaping OIComponents.SearchFieldComponent.SearchHandler)
  @_Concurrency.MainActor(unsafe) public func onValueChange(handler: @escaping OIComponents.SearchFieldComponent.SearchHandler)
  @_Concurrency.MainActor(unsafe) public func onSearchReturn(handler: @escaping OIComponents.SearchFieldComponent.SearchHandler)
  @_Concurrency.MainActor(unsafe) public func setEnabled(_ enabledValue: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidChangeSelection(_ textField: UIKit.UITextField)
  @objc deinit
}
public protocol ButtonLayoutContraintsModel {
  var heightValue: CoreFoundation.CGFloat { get }
  func layout(_ view: UIKit.UIView, superview: UIKit.UIView, spacing: CoreFoundation.CGFloat)
  func layoutSquare(_ view: UIKit.UIView)
  func layoutFont(titleLabel: UIKit.UILabel)
  func layoutIcon(iconImage: UIKit.UIImageView, uiView: UIKit.UIView)
}
public struct SpinnerConfiguration : OIComponents.LoadingViewConfigurationProtocol {
  public let backgroundColor: UIKit.UIColor
  public let loadingType: OIComponents.LoadingTypes
  public let loadingColor: UIKit.UIColor
  public let strokeWidth: CoreFoundation.CGFloat
  public let scaleFactor: Swift.Int
  public init(backgroundColor: UIKit.UIColor, loadingColor: UIKit.UIColor, strokeWidth: CoreFoundation.CGFloat, scaleFactor: Swift.Int)
  public func createLoadingView() -> UIKit.UIView
}
extension OIComponents.ConstraintBuilder {
  public func centerX(anchor uiViewAnchor: UIKit.NSLayoutXAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
  public func centerX(anchor uiViewAnchor: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
}
public enum CharacterType : Swift.CaseIterable {
  case letter
  case whitespace
  case number
  case symbol
  case punctuation
  case emailSymbol
  case dotSymbol
  case any
  public static func == (a: OIComponents.CharacterType, b: OIComponents.CharacterType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [OIComponents.CharacterType]
  public static var allCases: [OIComponents.CharacterType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension OIComponents.DesignTokens {
  public enum CornerRadius {
    public static let none: CoreFoundation.CGFloat
    public static let sm: CoreFoundation.CGFloat
    public static let md: CoreFoundation.CGFloat
    public static let lg: CoreFoundation.CGFloat
    public static let pill: CoreFoundation.CGFloat
  }
}
extension OIComponents.ConstraintBuilder {
  public func top(anchor uiViewAnchor: UIKit.NSLayoutYAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
  public func top(anchor uiView: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
  public func top(anchor layoutGuide: UIKit.UILayoutGuide, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
}
extension CoreFoundation.CGFloat {
  public static func widthValue(_ value: CoreFoundation.CGFloat, from frame: CoreFoundation.CGRect? = nil) -> CoreFoundation.CGFloat
  public static func heightValue(_ value: CoreFoundation.CGFloat, from frame: CoreFoundation.CGRect? = nil) -> CoreFoundation.CGFloat
  public static func widthMultiplier(to value: CoreFoundation.CGFloat, from frame: CoreFoundation.CGRect? = nil) -> CoreFoundation.CGFloat
  public static func heightMultiplier(to value: CoreFoundation.CGFloat, from frame: CoreFoundation.CGRect? = nil) -> CoreFoundation.CGFloat
}
public struct TextFieldComponentModel {
  public init(label: Swift.String, placeholder: Swift.String, icon: OIComponents.ComponentIcon, size: OIComponents.TextFieldComponentSize, masks: [Swift.String] = [], acceptedCharacters: [OIComponents.CharacterType] = [], keyboardType: UIKit.UIKeyboardType = .default, autocapitalizationType: UIKit.UITextAutocapitalizationType = .sentences, identifier: Swift.String? = nil, textViewIdentifier: Swift.String? = nil, helperIdentifier: Swift.String? = nil)
}
extension OIComponents.DesignTokens.Font {
  public enum Size {
    case xxs
    case xs
    case sm
    case md
    case lg
    case hxs
    case hsm
    case hmd
    case hlg
    case hxl
    case display
    case giant
    public static func == (a: OIComponents.DesignTokens.Font.Size, b: OIComponents.DesignTokens.Font.Size) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension OIComponents.DesignTokens {
  public enum Color {
    public enum Brand {
      public enum Primary {
        public static let pure: UIKit.UIColor
        public static let light: UIKit.UIColor
        public static let medium: UIKit.UIColor
        public static let dark: UIKit.UIColor
      }
      public enum Secondary {
        public static let pure: UIKit.UIColor
        public static let light: UIKit.UIColor
        public static let medium: UIKit.UIColor
        public static let dark: UIKit.UIColor
      }
      public enum Tertiary {
        public static let pure: UIKit.UIColor
        public static let light: UIKit.UIColor
        public static let medium: UIKit.UIColor
        public static let dark: UIKit.UIColor
      }
    }
    public enum Highlight {
      public static let pure: UIKit.UIColor
      public static let light: UIKit.UIColor
      public static let medium: UIKit.UIColor
      public static let dark: UIKit.UIColor
    }
    public enum Neutral {
      public enum Low {
        public static let pure: UIKit.UIColor
        public static let light: UIKit.UIColor
        public static let medium: UIKit.UIColor
        public static let dark: UIKit.UIColor
      }
      public enum High {
        public static let pure: UIKit.UIColor
        public static let light: UIKit.UIColor
        public static let medium: UIKit.UIColor
        public static let dark: UIKit.UIColor
      }
    }
    public enum Feedback {
      public enum Warning {
        public static let pure: UIKit.UIColor
        public static let light: UIKit.UIColor
        public static let medium: UIKit.UIColor
        public static let dark: UIKit.UIColor
      }
      public enum Helper {
        public static let pure: UIKit.UIColor
        public static let light: UIKit.UIColor
        public static let medium: UIKit.UIColor
        public static let dark: UIKit.UIColor
      }
      public enum Success {
        public static let pure: UIKit.UIColor
        public static let light: UIKit.UIColor
        public static let medium: UIKit.UIColor
        public static let dark: UIKit.UIColor
      }
    }
  }
}
extension Swift.Optional where Wrapped == OIComponents.HybridViewAppearance {
  public func orDefault() -> OIComponents.HybridViewAppearance
}
extension OIComponents.ConstraintBuilder {
  public func centerY(anchor uiViewAnchor: UIKit.NSLayoutYAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
  public func centerY(anchor uiViewAnchor: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
}
public protocol CheckCameraPermissionDelegate : AnyObject {
  func checkCameraPermission(continueFrom cameraPermissionVC: UIKit.UIViewController)
  func checkCameraPermission(close cameraPermissionVC: UIKit.UIViewController)
}
public enum Visibility : Swift.Int, Swift.CaseIterable {
  case displayed
  case hidden
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [OIComponents.Visibility]
  public typealias RawValue = Swift.Int
  public static var allCases: [OIComponents.Visibility] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum ComponentIcon {
  case none
  case has(UIKit.UIImage?)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func makeConstraints() -> OIComponents.ConstraintBuilder
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RadioButtonComponent : OIComponents.CheckboxComponent {
  @_Concurrency.MainActor(unsafe) override public init(label: Swift.String, checkIcon: UIKit.UIImage?)
  @objc deinit
}
public enum DesignTokens {
}
public enum TextFieldComponentSize {
  case normal
  case large
  public static func == (a: OIComponents.TextFieldComponentSize, b: OIComponents.TextFieldComponentSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OIComponents.DesignTokens {
  @_hasMissingDesignatedInitializers public class Font {
    public enum Highlight {
      public static func regular(size: OIComponents.DesignTokens.Font.Size) -> UIKit.UIFont
      public static func medium(size: OIComponents.DesignTokens.Font.Size) -> UIKit.UIFont
      public static func bold(size: OIComponents.DesignTokens.Font.Size) -> UIKit.UIFont
    }
    public enum Base {
      public static func regular(size: OIComponents.DesignTokens.Font.Size) -> UIKit.UIFont
      public static func medium(size: OIComponents.DesignTokens.Font.Size) -> UIKit.UIFont
      public static func bold(size: OIComponents.DesignTokens.Font.Size) -> UIKit.UIFont
    }
    @objc deinit
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ButtonComponent : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(model: OIComponents.ButtonComponentModel, identifier: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public func changeTitle(to newTitle: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public protocol LinkLayoutContraintsModel {
  var fontSize: OIComponents.DesignTokens.Font.Size { get }
  var iconMultiplier: CoreFoundation.CGFloat { get }
  var componentHeight: CoreFoundation.CGFloat { get }
  var verticalPadding: CoreFoundation.CGFloat { get }
}
@objc @_Concurrency.MainActor(unsafe) public class HybridLoadingView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(appearance: OIComponents.HybridViewAppearance)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CheckboxComponent : UIKit.UIView {
  public typealias OnChangeValueHandler = (Swift.Bool) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public init(label: Swift.String, checkIcon: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) public func setSelected(_ value: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setDisabled(_ value: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func onChangeValue(handler: @escaping OIComponents.CheckboxComponent.OnChangeValueHandler)
  @objc deinit
}
extension OIComponents.DesignTokens {
  public enum BorderWidth {
    public static let none: CoreFoundation.CGFloat
    public static let hairline: CoreFoundation.CGFloat
    public static let thin: CoreFoundation.CGFloat
    public static let thick: CoreFoundation.CGFloat
    public static let heavy: CoreFoundation.CGFloat
  }
}
@objc @_Concurrency.MainActor(unsafe) public class SecureTextFieldComponent : OIComponents.BaseFieldComponent, UIKit.UITextFieldDelegate {
  public typealias ValueChangeHandler = (_ component: OIComponents.SecureTextFieldComponent, _ value: Swift.String) -> Swift.Void
  public typealias LostFocusHandler = (_ component: OIComponents.SecureTextFieldComponent, _ value: Swift.String) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isFocused: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var textFieldValue: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(model: OIComponents.TextFieldComponentModel, iconVisibilityOn: UIKit.UIImage?, iconVisibilityOff: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) override public func disable()
  @_Concurrency.MainActor(unsafe) override public func enable()
  @_Concurrency.MainActor(unsafe) override public func canShowWarning() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func onValueChange(handler: @escaping OIComponents.SecureTextFieldComponent.ValueChangeHandler)
  @_Concurrency.MainActor(unsafe) public func onLostFocus(handler: @escaping OIComponents.SecureTextFieldComponent.LostFocusHandler)
  @_Concurrency.MainActor(unsafe) public func clear()
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidChangeSelection(_ textField: UIKit.UITextField)
  @objc deinit
}
public struct HybridViewAppearance {
  public init(configuration: any OIComponents.LoadingViewConfigurationProtocol)
}
public struct BaseFieldModel {
  public var label: Swift.String
  public var size: OIComponents.TextFieldComponentSize
  public var icon: OIComponents.ComponentIcon
}
public struct CheckCameraPermissionViewProperties {
  public var backButtonIcon: UIKit.UIImage?
  public var backButtonNormalStyle: OIComponents.ButtonComponentStyles
  public var cameraImage: UIKit.UIImage?
  public var cameraImageColor: UIKit.UIColor
  public var title: Swift.String
  public var titleColor: UIKit.UIColor
  public var titleFont: UIKit.UIFont
  public var caption: Swift.String
  public var captionColor: UIKit.UIColor
  public var captionFont: UIKit.UIFont
  public var checkPermissionButtonText: Swift.String
  public var checkPermissionButtonTextFont: UIKit.UIFont
  public var checkPermissionButtonHighlightedStyle: OIComponents.ButtonComponentStyles
  public var checkPermissionButtonNormalStyle: OIComponents.ButtonComponentStyles
  public var checkPermissionButtonDisabledStyle: OIComponents.ButtonComponentStyles
  public var backgroundColor: UIKit.UIColor
  public var bottomSheetCornerRadius: CoreFoundation.CGFloat
  public var bottomSheetColor: UIKit.UIColor
  public var bottomSheetTitle: Swift.String
  public var bottomSheetTitleColor: UIKit.UIColor
  public var bottomSheetTitleFont: UIKit.UIFont
  public var bottomSheetCaption: Swift.String
  public var bottomSheetCaptionFont: UIKit.UIFont
  public var bottomSheetCaptionColor: UIKit.UIColor
  public var openSettingsButtonText: Swift.String
  public var openSettingsButtonTextFont: UIKit.UIFont
  public var openSettingsButtonHighlightedStyle: OIComponents.ButtonComponentStyles
  public var openSettingsButtonNormalStyle: OIComponents.ButtonComponentStyles
  public var openSettingsButtonDisabledStyle: OIComponents.ButtonComponentStyles
  public var closeButtonText: Swift.String
  public var closeButtonTextFont: UIKit.UIFont
  public var closeButtonHighlightedStyle: OIComponents.ButtonComponentStyles
  public var closeButtonNormalStyle: OIComponents.ButtonComponentStyles
  public var closeButtonDisabledStyle: OIComponents.ButtonComponentStyles
  public init()
}
public struct OitiHeaderComponentModel {
  public init(oitiLogoImage: UIKit.UIImage?, optionsImage: UIKit.UIImage?, optionsButtonIdentifier: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseFieldComponent : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(model: OIComponents.BaseFieldModel)
  @_Concurrency.MainActor(unsafe) public func disable()
  @_Concurrency.MainActor(unsafe) public func enable()
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func showWarning(withText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func showOffWarning()
  @_Concurrency.MainActor(unsafe) public func canShowWarning() -> Swift.Bool
  @objc deinit
}
extension OIComponents.ViewBuilder {
  public struct TextField {
    public static func create() -> OIComponents.ViewBuilder.TextField
    public func build() -> UIKit.UITextField
    public func font(_ font: UIKit.UIFont) -> OIComponents.ViewBuilder.TextField
    public func textColor(_ color: UIKit.UIColor) -> OIComponents.ViewBuilder.TextField
    public func tintColor(_ color: UIKit.UIColor) -> OIComponents.ViewBuilder.TextField
    public func textAlignment(_ alignment: UIKit.NSTextAlignment) -> OIComponents.ViewBuilder.TextField
    public func clearButtonMode(_ mode: UIKit.UITextField.ViewMode) -> OIComponents.ViewBuilder.TextField
    public func showSecureTextEntry(_ value: Swift.Bool) -> OIComponents.ViewBuilder.TextField
  }
}
extension OIComponents.ViewBuilder {
  public struct ImageView {
    public static func create(for imageName: Swift.String, bundle: Foundation.Bundle = .main) -> OIComponents.ViewBuilder.ImageView
    public static func create(with image: UIKit.UIImage? = nil) -> OIComponents.ViewBuilder.ImageView
    public func build() -> UIKit.UIImageView
    public func tintColor(_ color: UIKit.UIColor) -> OIComponents.ViewBuilder.ImageView
    public func contentMode(_ mode: UIKit.UIView.ContentMode) -> OIComponents.ViewBuilder.ImageView
    public func backgroundColor(_ color: UIKit.UIColor) -> OIComponents.ViewBuilder.ImageView
    public func cornerRadius(_ radius: CoreFoundation.CGFloat) -> OIComponents.ViewBuilder.ImageView
    @available(iOS 11.0, *)
    public func cornerRadius(_ radius: CoreFoundation.CGFloat, edges: QuartzCore.CACornerMask) -> OIComponents.ViewBuilder.ImageView
    public func masksToBounds(_ value: Swift.Bool = true) -> OIComponents.ViewBuilder.ImageView
  }
}
public enum LinkComponentStyles {
  case standardNormal
  case standardHightlithed
  case onColorNormal
  case onColorHightlithed
  public static func == (a: OIComponents.LinkComponentStyles, b: OIComponents.LinkComponentStyles) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ViewBuilder {
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LinkComponent : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public init(model: OIComponents.LinkComponentModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension OIComponents.ViewBuilder {
  public struct Label {
    public static func create(for text: Swift.String) -> OIComponents.ViewBuilder.Label
    public static func create() -> OIComponents.ViewBuilder.Label
    public static func create(withAttributedString attrString: Foundation.NSAttributedString) -> OIComponents.ViewBuilder.Label
    public func build() -> UIKit.UILabel
    public func numberOfLines(_ number: Swift.Int) -> OIComponents.ViewBuilder.Label
    public func textAligment(_ aligment: UIKit.NSTextAlignment) -> OIComponents.ViewBuilder.Label
    public func font(_ font: UIKit.UIFont) -> OIComponents.ViewBuilder.Label
    public func textColor(_ color: UIKit.UIColor) -> OIComponents.ViewBuilder.Label
    public func identifier(_ identifier: Swift.String) -> OIComponents.ViewBuilder.Label
  }
}
extension OIComponents.ConstraintBuilder {
  public func leading(anchor uiViewAnchor: UIKit.NSLayoutXAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
  public func leading(anchor uiViewAnchor: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
  public func leading(anchor layoutGuide: UIKit.UILayoutGuide, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
}
public struct ActivityIndicatorConfiguration : OIComponents.LoadingViewConfigurationProtocol {
  public let loadingType: OIComponents.LoadingTypes
  public let loadingColor: UIKit.UIColor
  public let backgroundColor: UIKit.UIColor
  public let scaleFactor: Swift.Int
  public init(loadingColor: UIKit.UIColor, backgroundColor: UIKit.UIColor, scaleFactor: Swift.Int)
  public func createLoadingView() -> UIKit.UIView
}
public enum ButtonComponentStyles {
  case clear
  case custom(OIComponents.ButtonComponentAppearance)
  case standardPrimaryHightlithed
  case standardPrimaryNormal
  case standardPrimaryDisabled
  case standardSecondaryHightlithed
  case standardSecondaryNormal
  case standardSecondaryDisabled
  case standardGhostHightlithed
  case standardGhostHover
  case standardGhostNormal
  case standardGhostDisabled
  case onColorPrimaryHightlithed
  case onColorPrimaryNormal
  case onColorPrimaryDisabled
  case onColorSecondaryHightlithed
  case onColorSecondaryNormal
  case onColorSecondaryDisabled
  case onColorGhostHightlithed
  case onColorGhostNormal
  case onColorGhostDisabled
  public var appearance: OIComponents.ButtonComponentAppearance {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) public class CheckCameraPermissionViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any OIComponents.CheckCameraPermissionDelegate)?
  @_Concurrency.MainActor(unsafe) weak public var trackerDelegate: (any OIComponents.CheckCameraPermissionTrackerDelegate)?
  @_Concurrency.MainActor(unsafe) public init(customizationProperties: OIComponents.CheckCameraPermissionViewProperties = .init(), customView: (any OIComponents.CustomCameraPermissionView)? = nil)
  @available(*, unavailable)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
public enum ComponentSize {
  case ultraLarge
  case large
  case medium
  case small
  public static func == (a: OIComponents.ComponentSize, b: OIComponents.ComponentSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension OIComponents.DesignTokens {
  public enum SpacingInset {
    public static let quarck: CoreFoundation.CGFloat
    public static let nano: CoreFoundation.CGFloat
    public static let xs: CoreFoundation.CGFloat
    public static let sm: CoreFoundation.CGFloat
    public static let md: CoreFoundation.CGFloat
    public static let lg: CoreFoundation.CGFloat
  }
}
public protocol LoadingViewConfigurationProtocol {
  var backgroundColor: UIKit.UIColor { get }
  func createLoadingView() -> UIKit.UIView
}
extension OIComponents.DesignTokens {
  public enum OpacityLevel {
    public static let semiOpaque: CoreFoundation.CGFloat
    public static let intense: CoreFoundation.CGFloat
    public static let medium: CoreFoundation.CGFloat
    public static let light: CoreFoundation.CGFloat
    public static let semiTransparent: CoreFoundation.CGFloat
  }
}
public protocol CustomCameraPermissionView : UIKit.UIView {
  var backButton: UIKit.UIButton! { get }
  var checkPermissionButton: UIKit.UIButton! { get }
  var openSettingsButton: UIKit.UIButton! { get }
  var closeButton: UIKit.UIButton! { get }
  func showBottomSheet(visibility: OIComponents.Visibility)
}
@objc @_Concurrency.MainActor(unsafe) public class SelectComponent : OIComponents.BaseFieldComponent {
  @_Concurrency.MainActor(unsafe) public init(model: OIComponents.BaseFieldModel, downIcon: UIKit.UIImage?)
  @objc deinit
}
extension OIComponents.ConstraintBuilder {
  public func width(anchor uiViewAnchor: UIKit.NSLayoutDimension, multiplier: CoreFoundation.CGFloat = 1.0) -> OIComponents.ConstraintBuilder
  public func width(anchor uiViewAnchor: UIKit.UIView, multiplier: CoreFoundation.CGFloat = 1.0) -> OIComponents.ConstraintBuilder
  public func width(constant: CoreFoundation.CGFloat) -> OIComponents.ConstraintBuilder
}
public class ConstraintBuilder {
  public init(_ view: UIKit.UIView)
  public func constraintReference(_ constraintReference: inout UIKit.NSLayoutConstraint) -> OIComponents.ConstraintBuilder
  public func build()
  @objc deinit
}
extension OIComponents.ConstraintBuilder {
  public func bottom(anchor uiViewAnchor: UIKit.NSLayoutYAxisAnchor, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
  public func bottom(anchor uiViewAnchor: UIKit.UIView, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
  public func bottom(anchor layoutGuide: UIKit.UILayoutGuide, padding: CoreFoundation.CGFloat = 0.0) -> OIComponents.ConstraintBuilder
}
extension OIComponents.DesignTokens {
  public enum Spacing {
    public static let quarck: CoreFoundation.CGFloat
    public static let nano: CoreFoundation.CGFloat
    public static let xxxs: CoreFoundation.CGFloat
    public static let xxs: CoreFoundation.CGFloat
    public static let xs: CoreFoundation.CGFloat
    public static let sm: CoreFoundation.CGFloat
    public static let md: CoreFoundation.CGFloat
    public static let lg: CoreFoundation.CGFloat
    public static let xl: CoreFoundation.CGFloat
    public static let xxl: CoreFoundation.CGFloat
    public static let xxxl: CoreFoundation.CGFloat
    public static let huge: CoreFoundation.CGFloat
    public static let giant: CoreFoundation.CGFloat
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TextFieldComponent : UIKit.UIView, UIKit.UITextFieldDelegate {
  public typealias ObserveValueChangesHandler = (_ value: Swift.String, _ rawValue: Swift.String) -> Swift.Void
  public typealias LostFocusHandler = (_ component: OIComponents.TextFieldComponent, _ value: Swift.String, _ rawValue: Swift.String) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isFocused: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var textFieldValue: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var textFieldRawValue: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(model: OIComponents.TextFieldComponentModel)
  @_Concurrency.MainActor(unsafe) public func disable()
  @_Concurrency.MainActor(unsafe) public func enable()
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func showWarning(withText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func showOffWarning()
  @_Concurrency.MainActor(unsafe) public func addObserveValueChangesAction(handler: @escaping OIComponents.TextFieldComponent.ObserveValueChangesHandler)
  @_Concurrency.MainActor(unsafe) public func addOnLostFocusAction(handler: @escaping OIComponents.TextFieldComponent.LostFocusHandler)
  @_Concurrency.MainActor(unsafe) public func setText(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) public func clear()
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldDidChangeSelection(_ textField: UIKit.UITextField)
  @objc deinit
}
public protocol CheckCameraPermissionTrackerDelegate : AnyObject {
  func trackViewDidAppear()
  func trackGoBackAction()
  func trackCheckPermissionAction()
  func trackGoToSettingsAction()
  func trackCloseAction()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SquareButtonComponent : OIComponents.ButtonComponent {
  @_Concurrency.MainActor(unsafe) public func layoutForSuperview(_ superview: UIKit.UIView, with layoutContraintModel: any OIComponents.ButtonLayoutContraintsModel)
  @_Concurrency.MainActor(unsafe) override public init(model: OIComponents.ButtonComponentModel, identifier: Swift.String? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TextAreaComponent : UIKit.UIView, UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isFocused: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var textAreaValue: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var observeValueChanges: (Swift.String, Swift.String) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public init(model: OIComponents.TextFieldComponentModel)
  @_Concurrency.MainActor(unsafe) public func disable()
  @_Concurrency.MainActor(unsafe) public func enable()
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func showWarning(withText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func showOffWarning()
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @objc deinit
}
extension OIComponents.ButtonComponentType : Swift.Equatable {}
extension OIComponents.ButtonComponentType : Swift.Hashable {}
extension OIComponents.LoadingTypes : Swift.Equatable {}
extension OIComponents.LoadingTypes : Swift.Hashable {}
extension OIComponents.CharacterType : Swift.Equatable {}
extension OIComponents.CharacterType : Swift.Hashable {}
extension OIComponents.DesignTokens.Font.Size : Swift.Equatable {}
extension OIComponents.DesignTokens.Font.Size : Swift.Hashable {}
extension OIComponents.Visibility : Swift.Equatable {}
extension OIComponents.Visibility : Swift.Hashable {}
extension OIComponents.Visibility : Swift.RawRepresentable {}
extension OIComponents.TextFieldComponentSize : Swift.Equatable {}
extension OIComponents.TextFieldComponentSize : Swift.Hashable {}
extension OIComponents.LinkComponentStyles : Swift.Equatable {}
extension OIComponents.LinkComponentStyles : Swift.Hashable {}
extension OIComponents.ComponentSize : Swift.Equatable {}
extension OIComponents.ComponentSize : Swift.Hashable {}
